// ÿÆÿßÿØŸÖ ÿÆŸÑŸÅŸä ÿ®ÿ≥Ÿäÿ∑ ŸäÿπŸÖŸÑ ÿ®ÿ¥ŸÉŸÑ ŸÖÿ∂ŸÖŸàŸÜ
const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise');

const app = express();
const PORT = 3001;

// ÿ•ÿπÿØÿßÿØÿßÿ™ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
const DB_CONFIG = {
  host: '193.203.168.103',
  user: 'u384034873_conversations',
  password: '0165676135Aa@A',
  database: 'u384034873_conversations',
  port: 3306
};

// Middleware
app.use(cors());
app.use(express.json());

// Logging middleware
app.use((req, res, next) => {
  console.log(`üì• ${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// ÿØÿßŸÑÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
async function executeQuery(query, params = []) {
  let connection;
  try {
    connection = await mysql.createConnection(DB_CONFIG);
    const [rows] = await connection.execute(query, params);
    return rows;
  } catch (error) {
    console.error('‚ùå [DB] ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ:', error.message);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Health check
app.get('/api/health', (req, res) => {
  console.log('üíö [HEALTH] ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿßŸÑÿÆÿßÿØŸÖ');
  res.json({
    success: true,
    message: 'ÿßŸÑÿÆÿßÿØŸÖ ŸäÿπŸÖŸÑ ÿ®ÿ¥ŸÉŸÑ ÿ∑ÿ®ŸäÿπŸä',
    timestamp: new Date().toISOString(),
    port: PORT
  });
});

// ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ÿÆÿßÿØŸÖ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿßÿ™',
    endpoints: [
      'GET /api/health - ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿßŸÑÿÆÿßÿØŸÖ',
      'GET /api/companies - ÿ¨ŸÑÿ® ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™',
      'POST /api/companies/login - ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ'
    ]
  });
});

// ÿ¨ŸÑÿ® ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™
app.get('/api/companies', async (req, res) => {
  try {
    console.log('üè¢ [COMPANIES] ÿ¨ŸÑÿ® ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™');
    const companies = await executeQuery('SELECT id, name, email, status FROM companies ORDER BY created_at DESC LIMIT 10');
    
    res.json({
      success: true,
      data: companies || [],
      count: companies ? companies.length : 0
    });
  } catch (error) {
    console.error('‚ùå [COMPANIES] ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™:', error.message);
    res.status(500).json({
      success: false,
      error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™',
      message: error.message
    });
  }
});

// ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
app.post('/api/companies/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log('üîê [LOGIN] ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:', email);

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ'
      });
    }

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿ©
    const companies = await executeQuery(
      'SELECT id, name, email, status FROM companies WHERE email = ? AND status = "active"',
      [email]
    );

    if (companies.length === 0) {
      return res.status(401).json({
        success: false,
        message: 'ÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©'
      });
    }

    const company = companies[0];
    console.log('‚úÖ [LOGIN] ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠:', company.name);

    res.json({
      success: true,
      message: 'ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠',
      data: {
        id: company.id,
        name: company.name,
        email: company.email,
        token: 'simple_token_' + company.id
      }
    });

  } catch (error) {
    console.error('‚ùå [LOGIN] ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:', error.message);
    res.status(500).json({
      success: false,
      error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ',
      message: error.message
    });
  }
});

// ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©
app.use((req, res) => {
  console.log('‚ùå [404] ŸÖÿ≥ÿßÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ:', req.method, req.originalUrl);
  res.status(404).json({
    success: false,
    error: 'ÿßŸÑŸÖÿ≥ÿßÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ',
    path: req.originalUrl,
    method: req.method
  });
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿÆÿßÿØŸÖ
app.listen(PORT, () => {
  console.log('üöÄ ========================================');
  console.log(`üöÄ ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑÿÆŸÑŸÅŸä ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞ ${PORT}`);
  console.log(`üìç ÿßŸÑÿ±ÿßÿ®ÿ∑: http://localhost:${PORT}`);
  console.log(`üè• ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©: http://localhost:${PORT}/api/health`);
  console.log(`üè¢ ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™: http://localhost:${PORT}/api/companies`);
  console.log('üöÄ ========================================');
});

// ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°
process.on('uncaughtException', (error) => {
  console.error('‚ùå [UNCAUGHT EXCEPTION]:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå [UNHANDLED REJECTION]:', reason);
});
