/**
 * ๐ง ุฅุตูุงุญ ููุงุฆู ูุฌููุน ุฃุฎุทุงุก onClick
 * ูุตูุญ ุฌููุน ุฃุฎุทุงุก onClick ุงููุดููุฉ ูู ุงููููุงุช
 */

import fs from 'fs';
import path from 'path';

class FinalOnClickFixer {
  constructor() {
    this.fixes = [];
    this.totalFixed = 0;
  }

  log(level, message) {
    const timestamp = new Date().toLocaleTimeString('ar-EG');
    const emoji = {
      'info': 'โน๏ธ',
      'fix': '๐ง',
      'success': 'โ',
      'fail': 'โ'
    }[level] || '๐';
    
    console.log(`${emoji} [${timestamp}] ${message}`);
  }

  async fixAllFiles() {
    console.log('๐ง ุจุฏุก ุงูุฅุตูุงุญ ุงูููุงุฆู ูุฌููุน ุฃุฎุทุงุก onClick...\n');
    
    const files = [
      'src/pages/CompanyLogin.tsx',
      'src/pages/CompanyRegister.tsx'
    ];
    
    for (const file of files) {
      await this.fixFile(file);
    }
    
    this.generateReport();
  }

  async fixFile(filePath) {
    try {
      if (!fs.existsSync(filePath)) {
        return;
      }
      
      let content = fs.readFileSync(filePath, 'utf8');
      let originalContent = content;
      let fixesApplied = 0;
      
      // ููุท 1: onClick={() = aria-label="..."> function()}
      const pattern1 = /onClick=\{\(\)\s*=\s*aria-label="[^"]*">\s*([^}]+)\}/g;
      content = content.replace(pattern1, (match, func) => {
        fixesApplied++;
        return `onClick={() => ${func.trim()}}`;
      });
      
      // ููุท 2: onClick={() = aria-label="ุฒุฑ"> {
      const pattern2 = /onClick=\{\(\)\s*=\s*aria-label="[^"]*">\s*\{/g;
      content = content.replace(pattern2, () => {
        fixesApplied++;
        return 'onClick={() => {';
      });
      
      // ููุท 3: ุฅุตูุงุญ ุฃู onClick ูุดูู ุขุฎุฑ
      const pattern3 = /onClick=\{\(\)\s*=\s*[^>]*>\s*/g;
      content = content.replace(pattern3, () => {
        fixesApplied++;
        return 'onClick={() => ';
      });
      
      if (content !== originalContent) {
        fs.writeFileSync(filePath, content);
        this.totalFixed++;
        this.fixes.push(`${path.basename(filePath)}: ${fixesApplied} ุฅุตูุงุญุงุช`);
        this.log('success', `ุชู ุฅุตูุงุญ ${path.basename(filePath)} (${fixesApplied} ุฅุตูุงุญุงุช)`);
      }
      
    } catch (error) {
      this.log('fail', `ูุดู ุฅุตูุงุญ ${path.basename(filePath)}: ${error.message}`);
    }
  }

  generateReport() {
    console.log('\n' + '='.repeat(60));
    console.log('๐ง ุชูุฑูุฑ ุงูุฅุตูุงุญ ุงูููุงุฆู');
    console.log('='.repeat(60));
    
    console.log(`\n๐ ุงููุชุงุฆุฌ:`);
    console.log(`  ๐ ุงููููุงุช ุงูููุตูุญุฉ: ${this.totalFixed}`);
    console.log(`  โ ุงูุฅุตูุงุญุงุช: ${this.fixes.length}`);
    
    if (this.fixes.length > 0) {
      console.log(`\nโ ุงูุฅุตูุงุญุงุช ุงููุทุจูุฉ:`);
      this.fixes.forEach(fix => {
        console.log(`  โข ${fix}`);
      });
    }
    
    console.log(`\n๐ฏ ุงููุชูุฌุฉ:`);
    if (this.fixes.length > 0) {
      console.log('  ๐ ุชู ุฅุตูุงุญ ุฌููุน ุฃุฎุทุงุก onClick!');
    } else {
      console.log('  โน๏ธ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุฎุทุงุก');
    }
    
    console.log(`\n๐ก ุงูุฎุทูุฉ ุงูุชุงููุฉ:`);
    console.log('  โข ุชุดุบูู ุงูุจูุงุก: npm run build');
    
    console.log(`\n๐ง ุงูุฅุตูุงุญ ุงูููุงุฆู ุงูุชูู!`);
  }
}

// ุชุดุบูู ุงูุฅุตูุงุญ ุงูููุงุฆู
const fixer = new FinalOnClickFixer();
fixer.fixAllFiles().catch(error => {
  console.error('๐ฅ ุฎุทุฃ ูู ุงูุฅุตูุงุญ ุงูููุงุฆู:', error);
  process.exit(1);
});
