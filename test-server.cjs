const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3003;

// Middleware
app.use(cors());
app.use(express.json());

// Middleware ŸÑŸÑŸÄ logging
app.use((req, res, next) => {
  console.log(`üì• ${req.method} ${req.path}`);
  console.log('üìù Body:', JSON.stringify(req.body, null, 2));
  next();
});

// ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©
app.get('/api/health', (req, res) => {
  console.log('‚úÖ Health check');
  res.json({
    success: true,
    data: {
      status: 'healthy',
      timestamp: new Date().toISOString()
    }
  });
});

// ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ¥ÿ±ŸÉÿ© ÿ¨ÿØŸäÿØÿ© - ŸÜÿ≥ÿÆÿ© ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©
app.post('/api/companies/register', async (req, res) => {
  try {
    const { name, email, password, phone, city, country } = req.body;

    console.log('üè¢ [REGISTER] ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ¥ÿ±ŸÉÿ© ÿ¨ÿØŸäÿØÿ©:', name);
    console.log('üìß [REGISTER] ÿßŸÑÿ•ŸäŸÖŸäŸÑ:', email);

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
    if (!name || !email || !password) {
      console.log('‚ùå [REGISTER] ÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßŸÇÿµÿ©');
      return res.status(400).json({
        success: false,
        message: 'ÿßŸÑÿßÿ≥ŸÖ ŸàÿßŸÑÿ•ŸäŸÖŸäŸÑ ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿ∑ŸÑŸàÿ®ÿ©'
      });
    }

    // ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±: ŸÇÿ®ŸàŸÑ ÿ£Ÿä ÿ¥ÿ±ŸÉÿ© ÿ¨ÿØŸäÿØÿ©
    console.log('‚úÖ [REGISTER] ÿ™ÿ≥ÿ¨ŸäŸÑ ÿ¥ÿ±ŸÉÿ© ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä ŸÜÿ¨ÿ≠');

    const companyData = {
      id: `company_${Date.now()}`,
      name: name,
      email: email,
      phone: phone || null,
      city: city || null,
      country: country || 'Egypt',
      status: 'active',
      subscription_status: 'trial',
      created_at: new Date().toISOString()
    };

    const response = {
      success: true,
      message: 'ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ¥ÿ±ŸÉÿ© ÿ®ŸÜÿ¨ÿßÿ≠',
      company: companyData,
      data: companyData  // ŸÑŸÑÿ™ŸàÿßŸÅŸÇ ŸÖÿπ ŸÉŸÑÿß ÿßŸÑÿ∑ÿ±ŸäŸÇÿ™ŸäŸÜ
    };

    console.log('üì§ [REGISTER] ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©:', JSON.stringify(response, null, 2));
    return res.json(response);

  } catch (error) {
    console.error('‚ùå [REGISTER] ÿÆÿ∑ÿ£:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ'
    });
  }
});

// ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÑŸÑÿ¥ÿ±ŸÉÿ© - ŸÜÿ≥ÿÆÿ© ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©
app.post('/api/companies/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log('üîê [LOGIN] ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:', email);
    console.log('üîê [LOGIN] ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±:', password);

    // ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±: ŸÇÿ®ŸàŸÑ dummy@example.com ŸÖÿπ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± 123456
    if (email === 'dummy@example.com' && password === '123456') {
      console.log('‚úÖ [LOGIN] ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä ŸÜÿ¨ÿ≠');

      const response = {
        success: true,
        message: 'ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠',
        company: {
          id: 'test-company-id',
          name: 'ÿ¥ÿ±ŸÉÿ© ŸàŸáŸÖŸäÿ©',
          email: email,
          status: 'active',
          subscription_status: 'active'
        }
      };

      console.log('üì§ [LOGIN] ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©:', JSON.stringify(response, null, 2));
      return res.json(response);
    }

    // ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿµÿ≠Ÿäÿ≠ÿ©
    console.log('‚ùå [LOGIN] ÿ®ŸäÿßŸÜÿßÿ™ ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©');
    res.status(401).json({
      success: false,
      message: 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©'
    });

  } catch (error) {
    console.error('‚ùå [LOGIN] ÿÆÿ∑ÿ£:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ'
    });
  }
});

// ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© (ŸÅŸä ÿßŸÑÿ∞ÿßŸÉÿ±ÿ©)
let products = [];

// ÿ¨ŸÑÿ® ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ©
app.get('/api/companies/:companyId/products', async (req, res) => {
  try {
    const { companyId } = req.params;
    console.log('üì¶ [PRODUCTS] ÿ¨ŸÑÿ® ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ©:', companyId);

    // ŸÅŸÑÿ™ÿ±ÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ¥ÿ±ŸÉÿ©
    const companyProducts = products.filter(p => p.company_id === companyId);

    console.log('üì§ [PRODUCTS] ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', companyProducts.length);
    res.json({
      success: true,
      data: companyProducts
    });

  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™'
    });
  }
});

// ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ
app.post('/api/companies/:companyId/products', async (req, res) => {
  try {
    const { companyId } = req.params;
    const { name, description, price, stock_quantity, category } = req.body;

    console.log('üì¶ [PRODUCTS] ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ ŸÑŸÑÿ¥ÿ±ŸÉÿ©:', companyId);
    console.log('üìù [PRODUCTS] ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨:', { name, description, price, stock_quantity, category });

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
    if (!name || !description || price === undefined) {
      console.log('‚ùå [PRODUCTS] ÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßŸÇÿµÿ©');
      return res.status(400).json({
        success: false,
        message: 'ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸàÿßŸÑŸàÿµŸÅ ŸàÿßŸÑÿ≥ÿπÿ± ŸÖÿ∑ŸÑŸàÿ®ÿ©'
      });
    }

    // ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ
    const newProduct = {
      id: `product_${Date.now()}`,
      company_id: companyId,
      name: name,
      description: description,
      price: parseFloat(price),
      stock_quantity: parseInt(stock_quantity) || 0,
      category: category || 'ÿπÿßŸÖ',
      status: 'active',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÑŸÑŸÇÿßÿ¶ŸÖÿ©
    products.push(newProduct);

    console.log('‚úÖ [PRODUCTS] ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠');
    console.log('üì§ [PRODUCTS] ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©:', JSON.stringify(newProduct, null, 2));

    res.status(201).json({
      success: true,
      message: 'ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠',
      data: newProduct
    });

  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨'
    });
  }
});

// ÿ™ÿ≠ÿØŸäÿ´ ŸÖŸÜÿ™ÿ¨
app.put('/api/companies/:companyId/products/:productId', async (req, res) => {
  try {
    const { companyId, productId } = req.params;
    const { name, description, price, stock_quantity, category } = req.body;

    console.log('üì¶ [PRODUCTS] ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨:', productId);

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨
    const productIndex = products.findIndex(p => p.id === productId && p.company_id === companyId);

    if (productIndex === -1) {
      return res.status(404).json({
        success: false,
        message: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ'
      });
    }

    // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨
    products[productIndex] = {
      ...products[productIndex],
      name: name || products[productIndex].name,
      description: description || products[productIndex].description,
      price: price !== undefined ? parseFloat(price) : products[productIndex].price,
      stock_quantity: stock_quantity !== undefined ? parseInt(stock_quantity) : products[productIndex].stock_quantity,
      category: category || products[productIndex].category,
      updated_at: new Date().toISOString()
    };

    console.log('‚úÖ [PRODUCTS] ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠');

    res.json({
      success: true,
      message: 'ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠',
      data: products[productIndex]
    });

  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖŸÜÿ™ÿ¨'
    });
  }
});

// ÿ≠ÿ∞ŸÅ ŸÖŸÜÿ™ÿ¨
app.delete('/api/companies/:companyId/products/:productId', async (req, res) => {
  try {
    const { companyId, productId } = req.params;

    console.log('üì¶ [PRODUCTS] ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨:', productId);

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨
    const productIndex = products.findIndex(p => p.id === productId && p.company_id === companyId);

    if (productIndex === -1) {
      return res.status(404).json({
        success: false,
        message: 'ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ'
      });
    }

    // ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨
    products.splice(productIndex, 1);

    console.log('‚úÖ [PRODUCTS] ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠');

    res.json({
      success: true,
      message: 'ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠'
    });

  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨'
    });
  }
});

// ÿ®ÿØÿ° ÿßŸÑÿÆÿßÿØŸÖ
app.listen(PORT, () => {
  console.log(`üöÄ ÿÆÿßÿØŸÖ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞ ${PORT}`);
  console.log(`üì° API ŸÖÿ™ÿßÿ≠ ÿπŸÑŸâ: http://localhost:${PORT}/api`);
  console.log(`üè• ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©: http://localhost:${PORT}/api/health`);
  console.log(`üîê ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ: http://localhost:${PORT}/api/companies/login`);
  console.log(`üì¶ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™: http://localhost:${PORT}/api/companies/:companyId/products`);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå [UNCAUGHT EXCEPTION]:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå [UNHANDLED REJECTION]:', reason);
});
