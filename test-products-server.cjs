// ÿÆÿßÿØŸÖ ÿßÿÆÿ™ÿ®ÿßÿ± ŸÑŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise');
const crypto = require('crypto');

const app = express();
const PORT = 3003;

// ÿ•ÿπÿØÿßÿØÿßÿ™ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
const DB_CONFIG = {
  host: '193.203.168.103',
  user: 'u384034873_conversations',
  password: '0165676135Aa@A',
  database: 'u384034873_conversations',
  port: 3306
};

// Middleware
app.use(cors());
app.use(express.json());

// ÿØÿßŸÑÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
async function executeQuery(query, params = []) {
  const connection = await mysql.createConnection(DB_CONFIG);
  try {
    const [rows] = await connection.execute(query, params);
    return rows;
  } finally {
    await connection.end();
  }
}

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: 'Products API Server is running',
    timestamp: new Date().toISOString()
  });
});

// ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÑŸÑÿ¥ÿ±ŸÉÿ©
app.get('/api/companies/:companyId/products', async (req, res) => {
  try {
    const { companyId } = req.params;
    console.log('üîç [PRODUCTS] ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÑŸÑÿ¥ÿ±ŸÉÿ©:', companyId);

    const products = await executeQuery(
      'SELECT * FROM products WHERE company_id = ? ORDER BY created_at DESC',
      [companyId]
    );

    console.log('‚úÖ [PRODUCTS] ÿ™ŸÖ ÿ¨ŸÑÿ®', products.length, 'ŸÖŸÜÿ™ÿ¨');

    res.json({
      success: true,
      data: products || []
    });
  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', error);
    res.status(500).json({
      success: false,
      error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™'
    });
  }
});

// ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ
app.post('/api/companies/:companyId/products', async (req, res) => {
  try {
    const { companyId } = req.params;
    const data = req.body;

    console.log('üè™ [PRODUCTS] ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ ŸÑŸÑÿ¥ÿ±ŸÉÿ©:', companyId);
    console.log('üì¶ [PRODUCTS] ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨:', data.name);

    if (!data.name || data.name.trim() === '') {
      return res.status(400).json({
        success: false,
        message: 'ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÖÿ∑ŸÑŸàÿ®'
      });
    }

    const productId = crypto.randomUUID();

    await executeQuery(`
      INSERT INTO products (
        id, company_id, name, description, short_description, sku,
        price, sale_price, stock_quantity, category, brand,
        image_url, featured, weight, status, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      productId,
      companyId,
      data.name.trim(),
      data.description || '',
      data.short_description || '',
      data.sku || `SKU-${Date.now()}`,
      parseFloat(data.price) || 0,
      data.sale_price ? parseFloat(data.sale_price) : null,
      parseInt(data.stock_quantity) || 0,
      data.category || '',
      data.brand || '',
      data.image_url || '',
      data.featured ? 1 : 0,
      data.weight ? parseFloat(data.weight) : null,
      data.status || 'active'
    ]);

    // ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿßŸÑŸÖŸèŸÜÿ¥ÿ£
    const newProduct = await executeQuery(
      'SELECT * FROM products WHERE id = ?',
      [productId]
    );

    console.log('‚úÖ [PRODUCTS] ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠');

    res.json({
      success: true,
      data: newProduct[0]
    });
  } catch (error) {
    console.error('‚ùå [PRODUCTS] ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨:', error);
    res.status(500).json({
      success: false,
      error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨'
    });
  }
});

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿÆÿßÿØŸÖ
app.listen(PORT, () => {
  console.log(`üöÄ Products API Server running on port ${PORT}`);
  console.log(`üìç Health: http://localhost:${PORT}/api/health`);
  console.log(`üì¶ Products: http://localhost:${PORT}/api/companies/:companyId/products`);
});

// ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑÿπÿßŸÖÿ©
process.on('uncaughtException', (error) => {
  console.error('‚ùå [UNCAUGHT EXCEPTION]:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå [UNHANDLED REJECTION]:', reason);
});
