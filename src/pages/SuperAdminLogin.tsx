/**
 * ๐ ุตูุญุฉ ุชุณุฌูู ุฏุฎูู ุงููุณุชุฎุฏู ุงูุฃุณุงุณู
 * ุชุงุฑูุฎ ุงูุฅูุดุงุก: 22 ููููู 2025
 */

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Crown, Shield, Eye, EyeOff, LogIn, Info, Settings } from 'lucide-react';
import { toast } from 'sonner';

const SuperAdminLogin: React.FC = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: 'admin@system.com', // ููููุก ูุณุจูุงู ููุณูููุฉ
    password: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.email.trim()) {
      newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ';
    }

    if (!formData.password) {
      newErrors.password = 'ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      // ุงูุชุญูู ูู ุจูุงูุงุช ุงูุฏุฎูู ูุญููุงู (ูุคูุช)
      const email = formData.email.trim().toLowerCase();
      const password = formData.password;

      // ุจูุงูุงุช ุงูุฏุฎูู ุงูุงูุชุฑุงุถูุฉ
      if (email === 'admin@system.com' && (password === 'Admin123456!' || password === 'admin123456')) {
        // ุฅูุดุงุก ุจูุงูุงุช ุงููุณุชุฎุฏู ุงูุฃุณุงุณู
        const superAdminData = {
          id: 'super-admin-001',
          name: 'ูุฏูุฑ ุงููุธุงู ุงูุฃุณุงุณู',
          email: 'admin@system.com',
          role: 'super_admin',
          permissions: ['all'],
          loginTime: new Date().toISOString()
        };

        // ุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏู ุงูุฃุณุงุณู
        localStorage.setItem('superAdmin', JSON.stringify(superAdminData));

        toast.success('ูุฑุญุจุงู ุจู ูุฏูุฑ ุงููุธุงู! ๐');

        // ุงูุงูุชูุงู ูููุญุฉ ุชุญูู ุงููุณุชุฎุฏู ุงูุฃุณุงุณู
        navigate('/super-admin-dashboard');
      } else {
        toast.error('ุจูุงูุงุช ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ');
      }
    } catch (error) {
      console.error('Super admin login error:', error);
      toast.error('ุญุฏุซ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateSuperAdmin = async () => {
    try {
      setLoading(true);

      // ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃุณุงุณู ูุญููุงู (ูุคูุช)
      toast.success('ุงููุณุชุฎุฏู ุงูุฃุณุงุณู ููุฌูุฏ ุจุงููุนู! ๐');
      toast.info('ููููู ุชุณุฌูู ุงูุฏุฎูู ุจุงุณุชุฎุฏุงู ุงูุจูุงูุงุช ุงููุนุฑูุถุฉ');

      // ููุก ูููุฉ ุงููุฑูุฑ ุชููุงุฆูุงู
      setFormData(prev => ({ ...prev, password: 'admin123456' }));

    } catch (error) {
      console.error('Create super admin error:', error);
      toast.error('ุญุฏุซ ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃุณุงุณู');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 flex items-center justify-center p-4" role="main">
      <Card className="w-full max-w-md shadow-xl">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="p-3 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-full">
              <Crown className="h-8 w-8 text-white" />
            </div>
          </div>
          <CardTitle className="text-3xl font-bold text-gray-900">
            ูุฏูุฑ ุงููุธุงู ุงูุฃุณุงุณู
          </CardTitle>
          <CardDescription className="text-lg">
            ุชุณุฌูู ุฏุฎูู ูููุญุฉ ุชุญูู ุงููุธุงู
          </CardDescription>
        </CardHeader>

        <CardContent>
          {/* ูุนูููุงุช ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู */}
          <Alert className="mb-6 border-purple-200 bg-purple-50">
            <Info className="h-4 w-4 text-purple-600" />
            <AlertDescription className="text-purple-800">
              <strong>ุจูุงูุงุช ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู:</strong><br />
              ุงูุฅูููู: admin@system.com<br />
              ูููุฉ ุงููุฑูุฑ: admin123456 ุฃู Admin123456!
            </AlertDescription>
          </Alert>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* ุงูุจุฑูุฏ ุงูุฅููุชุฑููู */}
            <div className="space-y-2">
              <Label htmlFor="email" className="flex items-center">
                <Shield className="h-4 w-4 mr-2" />
                ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
              </Label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="admin@system.com"
                className={errors.email ? 'border-red-500' : ''}
                autoComplete="email"
              />
              {errors.email && <p className="text-red-500 text-sm">{errors.email}</p>}
            </div>

            {/* ูููุฉ ุงููุฑูุฑ */}
            <div className="space-y-2">
              <Label htmlFor="password">ูููุฉ ุงููุฑูุฑ</Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  placeholder="ูููุฉ ุงููุฑูุฑ"
                  className={errors.password ? 'border-red-500' : ''}
                  autoComplete="current-password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
              {errors.password && <p className="text-red-500 text-sm">{errors.password}</p>}
            </div>

            {/* ุฃุฒุฑุงุฑ ุงูุฅุฌุฑุงุกุงุช */}
            <div className="space-y-4">
              {/* ุฒุฑ ุชุณุฌูู ุงูุฏุฎูู */}
              <Button
                type="submit"
                className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white py-3 text-lg"
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู...
                  </div>
                ) : (
                  <div className="flex items-center">
                    <LogIn className="h-5 w-5 mr-2" />
                    ุชุณุฌูู ุงูุฏุฎูู
                  </div>
                )}
              </Button>

              {/* ุฒุฑ ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃุณุงุณู */}
              <Button
                type="button"
                variant="outline"
                className="w-full border-purple-300 text-purple-700 hover:bg-purple-50"
                onClick={handleCreateSuperAdmin}
                disabled={loading}
              >
                <Settings className="h-4 w-4 mr-2" />
                ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃุณุงุณู
              </Button>
            </div>

            {/* ุฑูุงุจุท ุฅุถุงููุฉ */}
            <div className="space-y-4">
              <div className="text-center">
                <button
                  type="button"
                  onClick={() => navigate('/company-login')}
                  className="text-sm text-gray-500 hover:text-gray-700"
                >
                  ุชุณุฌูู ุฏุฎูู ุงูุดุฑูุฉ
                </button>
              </div>

              <div className="text-center">
                <button
                  type="button"
                  onClick={() => navigate('/system-test')}
                  className="text-sm text-gray-500 hover:text-gray-700"
                >
                  ุงุฎุชุจุงุฑ ุงููุธุงู
                </button>
              </div>
            </div>
          </form>

          {/* ูุนูููุงุช ุงูุฏุนู */}
          <div className="mt-8 p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold text-gray-800 mb-2 flex items-center">
              <Crown className="h-4 w-4 mr-2" />
              ุตูุงุญูุงุช ุงููุฏูุฑ ุงูุฃุณุงุณู
            </h3>
            <div className="text-sm text-gray-600 space-y-1">
              <p>โข ุฅุฏุงุฑุฉ ุฌููุน ุงูุดุฑูุงุช ูุงููุณุชุฎุฏููู</p>
              <p>โข ุนุฑุถ ุฅุญุตุงุฆูุงุช ุงููุธุงู ุงูุดุงููุฉ</p>
              <p>โข ุฅุฏุงุฑุฉ ุฎุทุท ุงูุงุดุชุฑุงู ูุงูุฃุณุนุงุฑ</p>
              <p>โข ูุฑุงูุจุฉ ุฃุฏุงุก ุงููุธุงู ูุงูุฃูุงู</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuperAdminLogin;
