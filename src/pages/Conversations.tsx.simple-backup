/**
 * 💬 صفحة المحادثات المبسطة
 * تعمل بدون أخطاء مع بيانات تجريبية
 */

import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Search, MessageSquare, User, Clock, Send } from "lucide-react";

// بيانات تجريبية للمحادثات
const mockConversations = [
  {
    id: "1",
    customer_name: "أحمد محمد",
    last_message: "مرحباً، أريد الاستفسار عن المنتج",
    last_message_at: "2024-01-15T10:30:00Z",
    unread_count: 2,
    is_online: true,
    page_name: "صفحة الشركة"
  },
  {
    id: "2", 
    customer_name: "سارة أحمد",
    last_message: "شكراً لكم على الخدمة الممتازة",
    last_message_at: "2024-01-15T09:15:00Z",
    unread_count: 0,
    is_online: false,
    page_name: "صفحة الشركة"
  },
  {
    id: "3",
    customer_name: "محمد علي", 
    last_message: "متى سيتم التوصيل؟",
    last_message_at: "2024-01-15T08:45:00Z",
    unread_count: 1,
    is_online: true,
    page_name: "صفحة الشركة"
  }
];

// بيانات تجريبية للرسائل
const mockMessages = {
  "1": [
    {
      id: "m1",
      sender_type: "customer",
      message_text: "مرحباً، أريد الاستفسار عن المنتج",
      created_at: "2024-01-15T10:30:00Z"
    },
    {
      id: "m2", 
      sender_type: "page",
      message_text: "مرحباً بك! كيف يمكنني مساعدتك؟",
      created_at: "2024-01-15T10:31:00Z"
    }
  ],
  "2": [
    {
      id: "m3",
      sender_type: "customer", 
      message_text: "شكراً لكم على الخدمة الممتازة",
      created_at: "2024-01-15T09:15:00Z"
    }
  ],
  "3": [
    {
      id: "m4",
      sender_type: "customer",
      message_text: "متى سيتم التوصيل؟", 
      created_at: "2024-01-15T08:45:00Z"
    }
  ]
};

const SimpleConversations = () => {
  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [newMessage, setNewMessage] = useState("");

  const filteredConversations = mockConversations.filter(conv =>
    conv.customer_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const selectedConvData = mockConversations.find(c => c.id === selectedConversation);
  const messages = selectedConversation ? mockMessages[selectedConversation] || [] : [];

  const handleSendMessage = () => {
    if (newMessage.trim() && selectedConversation) {
      // محاكاة إرسال رسالة
      console.log('إرسال رسالة:', newMessage);
      setNewMessage("");
    }
  };

  return (
    <div className="h-full bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100" dir="rtl">
      <div className="container mx-auto px-6 py-8 h-full flex flex-col overflow-hidden">
        <div className="mb-8 flex-shrink-0">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            محادثات فيسبوك
          </h1>
          <p className="text-gray-600">
            إدارة المحادثات والرد على رسائل الفيسبوك
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1 min-h-0">
          {/* قائمة المحادثات */}
          <div className="lg:col-span-1">
            <Card className="h-full flex flex-col">
              <CardHeader className="flex-shrink-0">
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="h-5 w-5" />
                  المحادثات ({filteredConversations.length})
                </CardTitle>
                <div className="relative">
                  <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    placeholder="البحث في المحادثات..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pr-10"
                  />
                </div>
              </CardHeader>
              <CardContent className="flex-1 overflow-y-auto p-0">
                <div className="space-y-2 p-4">
                  {filteredConversations.map((conversation) => (
                    <div
                      key={conversation.id}
                      onClick={() => setSelectedConversation(conversation.id)}
                      className={`p-4 rounded-lg border cursor-pointer transition-colors ${
                        selectedConversation === conversation.id
                          ? 'bg-blue-50 border-blue-200'
                          : 'bg-white hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-gray-500" />
                          <span className="font-medium text-gray-900">
                            {conversation.customer_name}
                          </span>
                          {conversation.is_online && (
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                          )}
                        </div>
                        {conversation.unread_count > 0 && (
                          <Badge variant="destructive" className="text-xs">
                            {conversation.unread_count}
                          </Badge>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                        {conversation.last_message}
                      </p>
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <span>{conversation.page_name}</span>
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          <span>
                            {new Date(conversation.last_message_at).toLocaleTimeString('ar-EG', {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* نافذة الدردشة */}
          <div className="lg:col-span-2">
            {selectedConversation && selectedConvData ? (
              <Card className="h-full flex flex-col">
                <CardHeader className="flex-shrink-0 border-b">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <User className="h-8 w-8 text-gray-500" />
                      <div>
                        <h3 className="font-semibold">{selectedConvData.customer_name}</h3>
                        <p className="text-sm text-gray-500">{selectedConvData.page_name}</p>
                      </div>
                    </div>
                    {selectedConvData.is_online && (
                      <Badge variant="outline" className="text-green-600">
                        متصل الآن
                      </Badge>
                    )}
                  </div>
                </CardHeader>
                
                <CardContent className="flex-1 overflow-y-auto p-4">
                  <div className="space-y-4">
                    {messages.map((message) => (
                      <div
                        key={message.id}
                        className={`flex ${
                          message.sender_type === 'customer' ? 'justify-start' : 'justify-end'
                        }`}
                      >
                        <div
                          className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            message.sender_type === 'customer'
                              ? 'bg-gray-100 text-gray-900'
                              : 'bg-blue-500 text-white'
                          }`}
                        >
                          <p className="text-sm">{message.message_text}</p>
                          <p className="text-xs mt-1 opacity-70">
                            {new Date(message.created_at).toLocaleTimeString('ar-EG', {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
                
                <div className="flex-shrink-0 border-t p-4">
                  <div className="flex gap-2">
                    <Input
                      placeholder="اكتب رسالتك..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      className="flex-1"
                    />
                    <Button onClick={handleSendMessage} disabled={!newMessage.trim()}>
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </Card>
            ) : (
              <Card className="h-full flex items-center justify-center">
                <div className="text-center text-gray-500">
                  <MessageSquare className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                  <h3 className="text-lg font-medium mb-2">اختر محادثة</h3>
                  <p>اختر محادثة من القائمة لبدء الرد على الرسائل</p>
                </div>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SimpleConversations;