#!/usr/bin/env node

/**
 * ๐ ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ ุจุดูู ูุธูู
 */

import { spawn } from 'child_process';
import fs from 'fs';

function startFrontendClean() {
  console.log('๐ ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ ุจุดูู ูุธูู...\n');
  
  try {
    // 1. ุงูุชุญูู ูู ุงููููุงุช ุงููุทููุจุฉ
    console.log('1๏ธโฃ ุงูุชุญูู ูู ุงููููุงุช ุงููุทููุจุฉ...');
    
    const requiredFiles = [
      'package.json',
      'vite.config.ts',
      'index.html',
      'src/main.tsx',
      'src/App.tsx'
    ];
    
    let allFilesExist = true;
    for (const file of requiredFiles) {
      if (fs.existsSync(file)) {
        console.log(`โ ${file}: ููุฌูุฏ`);
      } else {
        console.log(`โ ${file}: ููููุฏ`);
        allFilesExist = false;
      }
    }
    
    if (!allFilesExist) {
      console.log('\nโ ุจุนุถ ุงููููุงุช ุงููุทููุจุฉ ููููุฏุฉ!');
      return;
    }
    
    // 2. ุชูุธูู cache
    console.log('\n2๏ธโฃ ุชูุธูู cache...');
    
    const cacheDirs = ['node_modules/.vite', 'dist', '.vite'];
    for (const dir of cacheDirs) {
      if (fs.existsSync(dir)) {
        console.log(`๐งน ุญุฐู ${dir}...`);
        fs.rmSync(dir, { recursive: true, force: true });
      }
    }
    
    console.log('โ ุชู ุชูุธูู cache');
    
    // 3. ุฅุนุงุฏุฉ ุชุซุจูุช dependencies
    console.log('\n3๏ธโฃ ุฅุนุงุฏุฉ ุชุซุจูุช dependencies...');
    console.log('๐ก ุชุดุบูู: npm install');
    
    const npmInstall = spawn('npm', ['install'], {
      stdio: 'inherit',
      shell: true,
      cwd: process.cwd()
    });
    
    npmInstall.on('close', (code) => {
      if (code === 0) {
        console.log('\nโ ุชู ุชุซุจูุช dependencies ุจูุฌุงุญ');
        
        // 4. ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ
        console.log('\n4๏ธโฃ ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ...');
        console.log('๐ก ุชุดุบูู: npm run dev');
        console.log('๐ ุณุชูุชุญ ุนูู: http://localhost:8081 ุฃู http://localhost:5173');
        
        const npmDev = spawn('npm', ['run', 'dev'], {
          stdio: 'inherit',
          shell: true,
          cwd: process.cwd()
        });
        
        npmDev.on('close', (devCode) => {
          if (devCode === 0) {
            console.log('\nโ ุชู ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ ุจูุฌุงุญ');
          } else {
            console.log('\nโ ุฎุทุฃ ูู ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ');
            console.log('๐ง ุชุญูู ูู ุงูุฃุฎุทุงุก ุฃุนูุงู');
          }
        });
        
        npmDev.on('error', (error) => {
          console.error('\n๐ฅ ุฎุทุฃ ูู ุชุดุบูู npm run dev:', error.message);
        });
        
      } else {
        console.log('\nโ ุฎุทุฃ ูู ุชุซุจูุช dependencies');
        console.log('๐ง ุชุญูู ูู ุงูุฃุฎุทุงุก ุฃุนูุงู');
      }
    });
    
    npmInstall.on('error', (error) => {
      console.error('\n๐ฅ ุฎุทุฃ ูู ุชุดุบูู npm install:', error.message);
      
      console.log('\n๐ง ุฌุฑุจ ูุฏููุงู:');
      console.log('1. npm install');
      console.log('2. npm run dev');
    });
    
  } catch (error) {
    console.error('๐ฅ ุฎุทุฃ ูู ุชุดุบูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ:', error.message);
    
    console.log('\n๐ง ุชุญูู ูู:');
    console.log('   1. ุชุซุจูุช Node.js ู npm');
    console.log('   2. ุตูุงุญูุงุช ุงููุชุงุจุฉ ูู ุงููุฌูุฏ');
    console.log('   3. ุงุชุตุงู ุงูุฅูุชุฑูุช');
    console.log('   4. ูุณุงุญุฉ ุงููุฑุต ุงูุตูุจ');
    
    console.log('\n๐ก ุฌุฑุจ ูุฏููุงู:');
    console.log('   npm install');
    console.log('   npm run dev');
  }
}

// ุชุดุบูู ุงูุฅุตูุงุญ
startFrontendClean();
