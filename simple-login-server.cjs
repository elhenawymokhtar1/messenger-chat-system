const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');

const app = express();
const PORT = 3002;

// ÿ•ÿπÿØÿßÿØÿßÿ™ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
const DB_CONFIG = {
  host: '193.203.168.103',
  user: 'u384034873_conversations',
  password: '0165676135Aa@A',
  database: 'u384034873_conversations',
  port: 3306
};

// Middleware
app.use(cors());
app.use(express.json());

// Middleware ŸÑŸÑŸÄ logging
app.use((req, res, next) => {
  console.log(`üì• ${req.method} ${req.path}`);
  next();
});

// ÿØÿßŸÑÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
async function executeQuery(query, params = []) {
  let connection;
  try {
    connection = await mysql.createConnection(DB_CONFIG);
    const [rows] = await connection.execute(query, params);
    console.log('‚úÖ [DB] ÿ™ŸÖ ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿ®ŸÜÿ¨ÿßÿ≠ÿå ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨:', rows.length, 'ÿµŸÅ');
    return rows;
  } catch (error) {
    console.error('‚ùå [DB] ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ:', error.message);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    data: {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: '0 ÿØŸÇŸäŸÇÿ©',
      memory: '',
      database: ''
    }
  });
});

// ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÑŸÑÿ¥ÿ±ŸÉÿ©
app.post('/api/companies/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log('üîê [LOGIN] ŸÖÿ≠ÿßŸàŸÑÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:', email);
    console.log('üîê [LOGIN] ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑÿ®ÿ≥Ÿäÿ∑ ŸäÿπÿßŸÑÿ¨ ÿßŸÑÿ∑ŸÑÿ®...');

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
    if (!email || !password) {
      console.log('‚ùå [LOGIN] ÿ®ŸäÿßŸÜÿßÿ™ ŸÜÿßŸÇÿµÿ©');
      return res.status(400).json({
        success: false,
        message: 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ'
      });
    }

    console.log('üîç [LOGIN] ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿ© ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™...');

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿ©
    const companies = await executeQuery(
      'SELECT id, name, email, password_hash, status, subscription_status FROM companies WHERE email = ?',
      [email.trim().toLowerCase()]
    );

    if (companies.length === 0) {
      console.log('‚ùå [LOGIN] ÿßŸÑÿ¥ÿ±ŸÉÿ© ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©');
      return res.status(401).json({
        success: false,
        message: 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©'
      });
    }

    const company = companies[0];
    console.log('‚úÖ [LOGIN] ÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿ¥ÿ±ŸÉÿ©:', company.name);

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
    console.log('üîê [LOGIN] ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±...');
    const isPasswordValid = await bcrypt.compare(password, company.password_hash);

    if (!isPasswordValid) {
      console.log('‚ùå [LOGIN] ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©');
      return res.status(401).json({
        success: false,
        message: 'ÿßŸÑÿ•ŸäŸÖŸäŸÑ ÿ£Ÿà ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©'
      });
    }

    console.log('‚úÖ [LOGIN] ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿµÿ≠Ÿäÿ≠ÿ©');

    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ¥ÿ±ŸÉÿ©
    if (company.status !== 'active') {
      console.log('‚ùå [LOGIN] ÿßŸÑÿ¥ÿ±ŸÉÿ© ÿ∫Ÿäÿ± ŸÜÿ¥ÿ∑ÿ©');
      return res.status(403).json({
        success: false,
        message: 'ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ¥ÿ±ŸÉÿ© ÿ∫Ÿäÿ± ŸÜÿ¥ÿ∑'
      });
    }

    // ÿ•ŸÜÿ¥ÿßÿ° token
    const token = `auth_token_${company.id}_${Date.now()}`;

    // ÿ™ÿ≠ÿØŸäÿ´ ÿ¢ÿÆÿ± ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ
    await executeQuery(
      'UPDATE companies SET last_login_at = NOW() WHERE id = ?',
      [company.id]
    );

    console.log('‚úÖ [LOGIN] ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠');

    res.json({
      success: true,
      message: 'ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠',
      data: {
        token: token,
        company: {
          id: company.id,
          name: company.name,
          email: company.email,
          status: company.status,
          subscription_status: company.subscription_status
        }
      }
    });

  } catch (error) {
    console.error('‚ùå [LOGIN] ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ:', error);
    res.status(500).json({
      success: false,
      message: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ'
    });
  }
});

// ÿ®ÿØÿ° ÿßŸÑÿÆÿßÿØŸÖ
app.listen(PORT, () => {
  console.log(`üöÄ ÿßŸÑÿÆÿßÿØŸÖ ÿßŸÑÿ®ÿ≥Ÿäÿ∑ ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÜŸÅÿ∞ ${PORT}`);
  console.log(`üì° API ŸÖÿ™ÿßÿ≠ ÿπŸÑŸâ: http://localhost:${PORT}/api`);
  console.log(`üè• ŸÅÿ≠ÿµ ÿßŸÑÿµÿ≠ÿ©: http://localhost:${PORT}/api/health`);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå [UNCAUGHT EXCEPTION]:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå [UNHANDLED REJECTION]:', reason);
});
